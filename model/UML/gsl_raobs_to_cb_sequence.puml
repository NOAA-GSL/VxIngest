
@startuml NetcdfMetarObsBuilderV01
title NetcdfMetarObsBuilderV01
hide footbox
actor       cron       as cron
participant VXIngest as runner


cron->runner++#lightblue: Start processing
note right of cron: passes command line params
runner->runner: VXIngest.parse() parse arguments
runner->runner++#gold: VXIngest.runit()
runner->runner: VXIngest.connect_cb()
runner->runner: load the ingest document ids
runner->runner: build_load_job_doc('madis')
runner->runner: get_file_list()
create queue Queue
runner->Queue: loads queue
loop #lightcyan threadcount times
    create participant VxIngestManager as manager
    runner->manager:VxIngestManager.start() start up manager threads and wait for completion
    manager->manager++#cyan: run()
    manager->manager:connect_cb()
    loop #seashell until queue is empty
       manager<-Queue:queue_element=get_nowait()
       manager->manager++:process_queue_element(queue_element)
         manager->manager:initialize document map
         manager->manager:set_builder_name(queue_element)
         create participant NetcdfMetarObsBuilderV01 as builder

         manager->builder++:build_document(queue_element) queue_element is a netcdf file
           builder->builder: netCDF4.getDataset(element) get the dataset
           builder->builder:get stations
           builder->builder:initialize_document_map()
           builder->builder++: handle_document()
             loop #ivory through netcdf records
               loop #lightyellow through template keys
                  alt #PaleTurquoise is data
                     builder->builder:new_document = handle_data (process template data with handler methods for each station)
                  else
                    builder->builder:new_document = handle_key (process template key with handler methods)
               end
             end
             builder->builder:document_map[new_document["id"]] = new_document
           return
         return document
         builder->builder:create_data_file_id()
         manager->manager:write_document_to_files(queue_element, document_map)
         manager->builder!!

       return
    end
    manager->manager!!
    return
end
runner->runner:write_load_job_to_files()

return
return@enduml