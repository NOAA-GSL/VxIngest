'\" t
.\"     Title: cbimport-json
.\"    Author: Couchbase
.\" Generator: Asciidoctor 2.0.16
.\"      Date: 2023-09-20
.\"    Manual: Couchbase Server Manual
.\"    Source: Couchbase Server 7.2.2-6401
.\"  Language: English
.\"
.TH "CBIMPORT\-JSON" "1" "2023-09-20" "Couchbase Server 7.2.2\-6401" "Couchbase Server Manual"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de URL
\fI\\$2\fP <\\$1>\\$3
..
.als MTO URL
.if \n[.g] \{\
.  mso www.tmac
.  am URL
.    ad l
.  .
.  am MTO
.    ad l
.  .
.  LINKSTYLE blue R < >
.\}
.SH "NAME"
cbimport-json \- Imports JSON data into Couchbase
.SH "SYNOPSIS"
.sp
.nf
cbimport json [\-\-cluster <url>] [\-\-bucket <bucket_name>] [\-\-dataset <path>]
              [\-\-format <data_format>] [\-\-username <username>] [\-\-password <password>]
              [\-\-client\-cert <path>] [\-\-client\-cert\-password <password>]
              [\-\-client\-key <path>] [\-\-client\-key\-password <password>]
              [\-\-generate\-key <key_expr>] [\-\-cacert <path>] [\-\-no\-ssl\-verify]
              [\-\-threads <num>] [\-\-error\-log <path>] [\-\-log\-file <path>] [\-\-verbose]
              [\-\-ignore\-fields <fields>] [\-\-field\-delimiter <char>]
              [\-\-generator\-delimiter <char>] [\-\-bucket\-quota <quota>]
              [\-\-scope\-collection\-exp <scope_collection_expression>]
              [\-\-bucket\-replicas <replicas>]
.fi
.br
.SH "DESCRIPTION"
.sp
Imports JSON data into Couchbase. The cbimport command supports files that have
a JSON document on each line, files that contain a JSON list where each element
is a document, and the Couchbase Samples format. The file format can be
specified with the \-\-format flag. See the DATASET FORMATS section below for more
details on the supported file formats.
.sp
The cbimport command also supports custom key\-generation for each document in
the imported file. Key generation is done with a combination of pre\-existing
fields in a document and custom generator functions supplied by cbimport. See
the KEY GENERATION section below for details about key generators.
.SH "OPTIONS"
.sp
Below are a list of required and optional parameters for the cbimport command.
.SS "Required"
.sp
\-c,\-\-cluster <url>
.RS 4
The hostname of a node in the cluster to import data into. See the HOST
FORMATS section below for details about hostname specification formats.
.RE
.sp
\-u,\-\-username <username>
.RS 4
The username for cluster authentication. The user must have the appropriate
privileges to take a backup.
.RE
.sp
\-p,\-\-password <password>
.RS 4
The password for cluster authentication. The user must have the appropriate
privileges to take a backup. If not password is supplied to this option then
you will be prompted to enter your password.
.RE
.sp
\-\-client\-cert <path>
.RS 4
The path to a client certificate used to authenticate when connecting to a
cluster. May be supplied with \f(CR\-\-client\-key\fP as an alternative to the
\f(CR\-\-username\fP and \f(CR\-\-password\fP flags.  See the CERTIFICATE AUTHENTICATION
section for more information.
.RE
.sp
\-\-client\-cert\-password <password>
.RS 4
The password for the certificate provided to the \f(CR\-\-client\-cert\fP flag, when
using this flag, the certificate/key pair is expected to be in the PKCS#12
format. See the CERTIFICATE AUTHENTICATION section for more information.
.RE
.sp
\-\-client\-key <path>
.RS 4
The path to the client private key whose public key is contained in the
certificate provided to the \f(CR\-\-client\-cert\fP flag. May be supplied with
\f(CR\-\-client\-cert\fP as an alternative to the \f(CR\-\-username\fP and \f(CR\-\-password\fP
flags. See the CERTIFICATE AUTHENTICATION section for more information.
.RE
.sp
\-\-client\-key\-password <password>
.RS 4
The password for the key provided to the \f(CR\-\-client\-key\fP flag, when using this
flag, the key is expected to be in the PKCS#8 format.  See the CERTIFICATE
AUTHENTICATION section for more information.
.RE
.sp
\-b,\-\-bucket <bucket_name>
.RS 4
The name of the bucket to import data into.
.RE
.sp
\-d,\-\-dataset <uri>
.RS 4
The URI of the dataset to be loaded. cbimport supports loading data from a
local files only. When importing data from a local file the path must be
prefixed with file://.
.RE
.sp
\-f,\-\-format <format>
.RS 4
The format of the dataset specified (lines, list, sample). See the DATASET
FORMATS section below for more details on the formats supported by cbimport.
.RE
.SS "Optional"
.sp
\-g,\-\-generate\-key <key_expr>
.RS 4
Specifies a key expression used for generating a key for each document
imported. This parameter is required for list and lines formats, but not for
the sample format. See the KEY GENERATION section below for more information
on specifying key generators. If the resulting key is not unique the values
will be overridden, resulting in fewer documents than expected being imported.
To ensure that the key is unique add #MONO_INCR# or #UUID# to the key
generator expression.
.RE
.sp
\-\-field\-delimiter <char>
.RS 4
Specifies the character to be used to denote field references in the key
generator expression. It defaults to %. See the KEY GENERATION section.
.RE
.sp
\-\-generator\-delimiter <char>
.RS 4
Specifies the character to be used to denote generator references in the key
generator expression. It defaults to #. See the KEY GENERATION section.
.RE
.sp
\-\-no\-ssl\-verify
.RS 4
Skips the SSL verification phase. Specifying this flag will allow a
connection using SSL encryption, but will not verify the identity of the
server you connect to. You are vulnerable to a man\-in\-the\-middle attack if
you use this flag. Either this flag or the \-\-cacert flag must be specified
when using an SSL encrypted connection.
.RE
.sp
\-\-cacert <cert_path>
.RS 4
Specifies a CA certificate that will be used to verify the identity of the
server being connecting to. Either this flag or the \-\-no\-ssl\-verify flag
must be specified when using an SSL encrypted connection.
.RE
.sp
\-\-limit\-docs <num>
.RS 4
Specifies that the utility should stop loading data after reading a certain
amount of docs from the dataset. This option is useful when you have a large
dataset and only want to partially load it.
.RE
.sp
\-\-skip\-docs <num>
.RS 4
Specifies that the utility should skip some docs before we start importing
data. If this flag is used together with the \-\-limit\-rows flag then we will
import the number of rows specified by \-\-limit\-rows after we have skipped the
rows specified by \-\-skip\-rows.
.RE
.sp
\-\-scope\-collection\-exp <scope_collection_expression>
.RS 4
When importing to a collection aware cluster you may optionally choose to
provide a scope/collection expression which will be used to determine which
scope/collection to insert the imported document in. This flag closely
resembles the behavior/syntax of the \f(CR\-\-generate\-key\fP flag. For example, to
use a static scope/collection use \f(CR\-\-scope\-collection\-exp scope.collection\fP.
To use information from the JSON document, specify the column name between
\f(CR%\fP characters. For example,
\f(CR\-\-scope\-collection\-exp %scope_field%.%collection_field%\fP. Fields that
contain a \f(CR%\fP character may be escaped using \f(CR%%\fP. For more information about
the accepted format, see the \f(CRSCOPE/COLLECTION PARSER\fP section.
.RE
.sp
\-t,\-\-threads <num>
.RS 4
Specifies the number of concurrent clients to use when importing data. Fewer
clients means imports will take longer, but there will be less cluster
resources used to complete the import. More clients means faster imports,
but at the cost of more cluster resource usage. This parameter defaults to 1
if it is not specified and it is recommended that this parameter is not set
to be higher than the number of CPUs on the machine where the import is
taking place.
.RE
.sp
\-e,\-\-errors\-log <path>
.RS 4
Specifies a log file where JSON documents that could not be loaded are
written to. A document might not be loaded if a key could not be generated
for the document or if the document is not valid JSON. The errors file is
written in the "lines" format (one document per line).
.RE
.sp
\-l,\-\-log\-file <path>
.RS 4
Specifies a log file for writing debugging information about cbimport
execution.
.RE
.sp
\-v,\-\-verbose
.RS 4
Specifies that logging should be sent to stdout. If this flag is specified
along with the \-l/\-\-log\-file option then the verbose option is ignored.
.RE
.sp
\-\-ignore\-fields <fields>
.RS 4
Specify a comma separated list of field names that will be excluded from
the imported document. The field reference syntax is the same as the one
used in KEY GENERATORS to refer to fields.
.RE
.sp
\-\-bucket\-quota <quota>
.RS 4
When importing a sample dataset using \f(CR\-\-format sample\fP this argument will
set the memory quota for the sample bucket. Note that this will edit the
bucket settings if the bucket already exists, and will create it if it
doesn\(cqt.
.RE
.sp
\-\-bucket\-replicas <replicas>
.RS 4
When importing a sample dataset using \f(CR\-\-format sample\fP this argument will
set the number of replicas for the sample bucket. Note that this will edit
the bucket settings if the bucket already exists, and will create it if it
doesn\(cqt.
.RE
.SH "HOST FORMATS"
.sp
When specifying a host/cluster for a command using the \f(CR\-c\fP/\f(CR\-\-cluster\fP flag, the following formats
are accepted:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
\f(CR<addr>:<port>\fP
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
\f(CRhttp://<addr>:<port>\fP
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
\f(CRhttps://<addr>:<port>\fP
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
\f(CRcouchbase://<addr>:<port>\fP
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
\f(CRcouchbases://<addr>:<port>\fP
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
\f(CRcouchbase://<srv>\fP
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
\f(CRcouchbases://<srv>\fP
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
\f(CR<addr>:<port>,<addr>:<port>\fP
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
\f(CR<scheme>://<addr>:<port>,<addr>:<port>\fP
.RE
.sp
The \f(CR<port>\fP portion of the host format may be omitted, in which case the default port will be used
for the scheme provided. For example, \f(CRhttp://\fP and \f(CRcouchbase://\fP will both default to 8091 where
\f(CRhttps://\fP and \f(CRcouchbases://\fP will default to 18091. When connecting to a host/cluster using a
non\-default port, the \f(CR<port>\fP portion of the host format must be specified.
.SS "Connection Strings (Multiple nodes)"
.sp
The \f(CR\-c\fP/\f(CR\-\-cluster\fP flag accepts multiple nodes in the format of a connection string; this is a
comma separated list of \f(CR<addr>:<port>\fP strings where \f(CR<scheme>\fP only needs to be specified once.
The main advantage of supplying multiple hosts is that in the event of a failure, the next host in
the list will be used.
.sp
For example, all of the following are valid connection strings:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
\f(CRlocalhost,[::1]\fP
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
\f(CR10.0.0.1,10.0.0.2\fP
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
\f(CRhttp://10.0.0.1,10.0.0.2\fP
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
\f(CRhttps://10.0.0.1:12345,10.0.0.2\fP
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
\f(CRcouchbase://10.0.0.1,10.0.0.2\fP
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
\f(CRcouchbases://10.0.0.1:12345,10.0.0.2:12345\fP
.RE
.SS "SRV Records"
.sp
The \f(CR\-c\fP/\f(CR\-\-cluster\fP flag accepts DNS SRV records in place of a host/cluster address where the SRV
record will be resolved into a valid connection string. There are a couple of rules which must be
followed when supplying an SRV record which are as follows:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
The \f(CR<scheme>\fP portion must be either \f(CRcouchbase://\fP or \f(CRcouchbases://\fP
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
The \f(CR<srv>\fP portion should be a hostname with no port
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
The \f(CR<srv>\fP portion must not be a valid IP address
.RE
.sp
For example, all of the following are valid connection string using an SRV record:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
\f(CRcouchbase://hostname\fP
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
\f(CRcouchbases://hostname\fP
.RE
.SS "Alternate Addressing (CAO/K8S)"
.sp
Users of the CAO (Couchbase Autonomous Operator) or K8S may need to supply the
\f(CRnetwork=external\fP query parameter to force connection via the defined
alternate addressing.
.sp
For example, the following are valid connection strings:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
\f(CRhttps://10.0.0.1:12345,10.0.0.2?network=default\fP
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
\f(CRhttps://10.0.0.1:12345,10.0.0.2?network=external\fP
.RE
.SH "CERTIFICATE AUTHENTICATION (MTLS AUTHENTICATION)"
.sp
This tool supports authenticating against a Couchbase Cluster by using certificate based authentication (mTLS
authentication). To use certificate based authentication a certificate/key must be supplied, there a currently
multiple ways this may be done.
.SS "PEM ENCODED CERTIFICATE/KEY"
.sp
An unencrypted PEM encoded certificate/key may be supplied by using:
\- \f(CR\-\-client\-cert <path>\fP
\- \f(CR\-\-client\-key <path>\fP
.sp
The file passed to \f(CR\-\-client\-cert\fP must contain the client certificate, and an optional chain required to authenticate
the client certificate.
.sp
The file passed to \f(CR\-\-client\-key\fP must contain at most one private key, the key can be in one of the following formats:
\- PKCS#1
\- PKCS#8
\- EC
.sp
Currently, only the following key types are supported:
\- RSA
\- ECDSA
\- ED25519
.SS "PEM ENCODED CERTIFICATE/PEM OR DER ENCRYPTED PKCS#8 KEY"
.sp
An encrypted PKCS#8 formatted key may be provided using:
\- \f(CR\-\-client\-cert <path>\fP
\- \f(CR\-\-client\-key <path>\fP
\- \f(CR\-\-client\-key\-password <password>\fP
.sp
The file passed to \f(CR\-\-client\-cert\fP must contain the client certificate, and an optional chain required to authenticate
the client certificate.
.sp
Currently, only the following key types are supported:
\- RSA
\- ECDSA
\- ED25519
.SS "ENCRYPTED PKCS#12 CERTIFICATE/KEY"
.sp
An encrypted PKCS#12 certificate/key may be provided using:
\- \f(CR\-\-client\-cert <path>\fP
\- \f(CR\-\-client\-cert\-password <password>\fP
.sp
The file passed to \f(CR\-\-client\-cert\fP must contain the client certificate and exactly one private key. It may also contain
the chain required to authenticate the client certificate.
.sp
Currently, only the following key types are supported:
\- RSA
\- ECDSA
\- ED25519
.SH "DATASET FORMATS"
.sp
The cbimport command supports the formats listed below.
.SS "LINES"
.sp
The lines format specifies a file that contains one JSON document on every line
in the file. This format is specified by setting the \-\-format option to "lines".
Below is an example of a file in lines format.
.sp
.if n .RS 4
.nf
.fam C
{"key": "mykey1", "value": "myvalue1"}
{"key": "mykey2", "value": "myvalue2"}
{"key": "mykey3", "value": "myvalue3"}
{"key": "mykey4", "value": "myvalue4"}
.fam
.fi
.if n .RE
.SS "LIST"
.sp
The list format specifies a file which contains a JSON list where each element
in the list is a JSON document. The file may only contain a single list, but the
list may be specified over multiple lines. This format is specified by setting
the \-\-format option to "list". Below is an example of a file in list format.
.sp
.if n .RS 4
.nf
.fam C
[
  {
    "key": "mykey1",
    "value": "myvalue1"
  },
  {"key": "mykey2", "value": "myvalue2"},
  {"key": "mykey3", "value": "myvalue3"},
  {"key": "mykey4", "value": "myvalue4"}
]
.fam
.fi
.if n .RE
.SS "SAMPLE"
.sp
The sample format specifies a ZIP file or folder containing multiple documents.
This format is intended to load Couchbase sample data sets. Unlike the lines and
list formats the sample format may also contain indexes, views, and full\-text
index definitions. The folder structure is specified below.
.sp
.if n .RS 4
.nf
.fam C
+ (root folder)
  + docs
    key1.json
    key2.json
    ...
  + design_docs
    indexes.json
    views.json
.fam
.fi
.if n .RE
.sp
All documents in the samples format are contained in the docs folder and there
is one file per document. Each filename in the docs folder is the key name for
the JSON document contained in the file. If the filename contains a .json
extension then the extension is excluded from the key name during the import.
This name can be overridden if the \-\-generate\-key option is specified. The docs
folder may also contain sub\-folders of documents to be imported. Sub\-folders can
be used to organize large amounts of documents into a more readable categorized
form.
.sp
The design_docs folder contains index definitions. The filename indexes.json is
reserved for secondary indexes. All other file names are used for view indexes.
.SH "KEY GENERATORS"
.sp
Key generators are used in order to generate a key for each document loaded.
Keys can be generated by using a combination of characters, the values of a
given field in a document, and custom generators. Field substitutions are done
by wrapping the field name in "%" and custom generators are wrapped in "#".
Below is an example of a key generation expression.
.sp
Given the document:
.sp
.if n .RS 4
.nf
.fam C
{
  "name": "alice",
  "age": 40,
  "address": {
    "street": "Broadway",
    "country": "USA"
  }
}
.fam
.fi
.if n .RE
.sp
Key Generator Expression:
.sp
.if n .RS 4
.nf
.fam C
  \-\-generate\-key key::%name%::#MONO_INCR#
.fam
.fi
.if n .RE
.sp
The following key would be generated:
.sp
.if n .RS 4
.nf
.fam C
  key::alice::1
.fam
.fi
.if n .RE
.sp
In the example above we generate a key using both the value of a field in the
document and a custom generator. We use the "name" field to use the value of the
name field as part of the key. This is specified by "%name%" which tells the key
generator to substitute the value of the field "name" into the key. To reference
a nested field we would use "parent.child" syntax. For example to reference the
country we would use \*(Aq%address.country%\*(Aq. To reference a field that contains a
dot in the name we escape the string using `` . For example
\*(Aq%`address.country`%\*(Aq refers to a field named "address.country".
.sp
This example also contains a generator function MONO_INCR which will increment
by 1 each time the key generator is called. Since this is the first time this
key generator was executed it returns 1. If we executed the key generator again
it would return 2 and so on. The starting value of the MONO_INCR generator is 1
by default, but it can be changed by specifying a number in brackets after the
MONO_INCR generator name. To start generating monotonically incrementing values
starting at 100 for example, the generator MONO_INCR[100] would be specified.
The cbimport command current contains a monotonic increment generator
(MONO_INCR) and a UUID generator (UUID).
.sp
Any text that isn\(cqt wrapped in "%" or "#" is static text and will be in the
result of all generated keys. If a key needs to contain a "%" or "#" in static
text then they need to be escaped by providing a double "%" or "#"
(ex. "%%" or "##"). The delimiter characters can be changed to avoid having to
escape them by using the \-\-field\-delimiter and \-\-generator\-delimiter flags.
.sp
If a key cannot be generated because the field specified in the key generator is
not present in the document then the key will be skipped. To see a list of
document that were not imported due to failed key generation users can specify
the \-\-errors\-log <path> parameter to dump a list of all documents that could not
be imported to a file.
.SH "SCOPE/COLLECTION PARSER"
.sp
Scope/collection parsers are used in order to determine which scope/collection
to insert documents into. There are currently two supported parsers text/field.
.sp
Given the JSON dataset:
.sp
.if n .RS 4
.nf
.fam C
[
  {"product": "apple", "stock": 100, "type": "produce", "subtype": "fruit"}
]
.fam
.fi
.if n .RE
.sp
Scope/collection expression:
.sp
.if n .RS 4
.nf
.fam C
\-\-scope\-collection\-exp %type%.%subtype%
.fam
.fi
.if n .RE
.sp
The document would be inserted into the \*(Aqfruit\*(Aq collection inside the \*(Aqproduce\*(Aq
scope.
.sp
Given the JSON dataset:
.sp
.if n .RS 4
.nf
.fam C
[
  {"fname": "alice", "age": 40},
  {"fname": "barry", "age": 36}
]
.fam
.fi
.if n .RE
.sp
Scope/collection expression:
.sp
.if n .RS 4
.nf
.fam C
\-\-scope\-collection\-exp uk.manchester
.fam
.fi
.if n .RE
.sp
In this case, no fields in the document will be used to determine the scope or
collection; all the documents would be inserted into the \*(Aqmanchester\*(Aq collection
inside the \*(Aquk\*(Aq scope.
.sp
There is nothing stopping the mixture of text/field expressions the following
are all valid expressions.
.sp
.if n .RS 4
.nf
.fam C
uk.%city%
uk.%city%\-5
%country%.%city%::%town%
.fam
.fi
.if n .RE
.SH "EXAMPLES"
.sp
In the examples below we will show examples for importing data from the files
below.
.sp
.if n .RS 4
.nf
.fam C
\&./data/lines.json

  {"name": "alice", "age": 37}
  {"name": "bob", "age": 39}

\&./data/list.json

  [
    {"name": "candice", "age": 42},
    {"name": "daniel", "age": 38}
  ]
.fam
.fi
.if n .RE
.sp
To import data from /data/lines.json using a key containing the "name" field and
utilizing 4 threads the following command can be run.
.sp
.if n .RS 4
.nf
.fam C
$ cbimport json \-c couchbase://127.0.0.1 \-u Administrator \-p password \(rs
 \-b default \-d file:///data/lines.json \-f lines \-g key::%name% \-t 4
.fam
.fi
.if n .RE
.sp
To import data from /data/list.json using a key containing the "name" field and
the UUID generator the following command would be run.
.sp
.if n .RS 4
.nf
.fam C
$ cbimport json \-c couchbase://127.0.0.1 \-u Administrator \-p password \(rs
 \-b default \-d file:///data/list.json \-f list \-g key::%name%::#UUID# \-t 4
.fam
.fi
.if n .RE
.sp
To import data from /data/list.json using a key containing the "name" field and
then a unique id separated by a # we could use the \-\-generator\-delimiter flag
to avoid escaping the # sign. An example would be:
.sp
.if n .RS 4
.nf
.fam C
$ cbimport json \-c couchbase://127.0.0.1 \-u Administrator \-p password \(rs
 \-b default \-d file:///data/list.json \-f list \-\-generator\-delimiter \*(Aq£\*(Aq \(rs
 \-g key::%name%#£UUID£ \-t 4
.fam
.fi
.if n .RE
.sp
If the dataset in not available on the local machine where the command is run,
but is available via an HTTP URL we can still import the data using cbimport. If
we assume that the data is located at \c
.URL "http://data.org/list.json" "" ""
and that the
dataset is in the JSON list format then we can import the data with the command
below.
.sp
.if n .RS 4
.nf
.fam C
$ cbimport json \-c couchbase://127.0.0.1 \-u Administrator \-p password \(rs
 \-b default \-d http://data.org/list.json \-f list \-g key::%name%::#UUID# \-t 4
.fam
.fi
.if n .RE
.sp
If the JSON dataset contains information which would allow importing into
scopes/collections then a command like the one below could be used.
.sp
.if n .RS 4
.nf
.fam C
[{"product": "apple", "stock": 100, "type": "produce", "subtype": "fruit"}]

$ cbimport json \-c couchbase://127.0.0.1 \-u Administrator \-p password
 \-b default \-d file://data/list.csv \-f list \-g %product%
 \-\-scope\-collection\-exp %type%.%subtype%
.fam
.fi
.if n .RE
.sp
This command would place the document into the fruit collection inside the
produce scope.
.SH "DISCUSSION"
.sp
The cbimport\-json command is used to quickly import data from various files
containing JSON data. While importing JSON the cbimport command only utilizes a
single reader. As a result importing large dataset may benefit from being
partitioned into multiple files and running a separate cbimport process on each
file.
.SH "ENVIRONMENT AND CONFIGURATION VARIABLES"
.sp
CB_CLUSTER
.RS 4
Specifies the hostname of the Couchbase cluster to connect to. If the
hostname is supplied as a command line argument then this value is
overridden.
.RE
.sp
CB_USERNAME
.RS 4
Specifies the username for authentication to a Couchbase cluster. If the
username is supplied as a command line argument then this value is
overridden.
.RE
.sp
CB_PASSWORD
.RS 4
Specifies the password for authentication to a Couchbase cluster. If the
password is supplied as a command line argument then this value is
overridden.
.RE
.sp
CB_CLIENT_CERT
.RS 4
The path to a client certificate used to authenticate when connecting to a
cluster. May be supplied with \f(CRCB_CLIENT_KEY\fP as an alternative to the
\f(CRCB_USERNAME\fP and \f(CRCB_PASSWORD\fP variables. See the CERTIFICATE AUTHENTICATION
section for more information.
.RE
.sp
CB_CLIENT_CERT_PASSWORD
.RS 4
The password for the certificate provided to the \f(CRCB_CLIENT_CERT\fP variable,
when using this variable, the certificate/key pair is expected to be in the
PKCS#12 format. See the CERTIFICATE AUTHENTICATION section for more
information.
.RE
.sp
CB_CLIENT_KEY
.RS 4
The path to the client private key whose public key is contained in the
certificate provided to the \f(CRCB_CLIENT_CERT\fP variable. May be supplied with
\f(CRCB_CLIENT_CERT\fP as an alternative to the \f(CRCB_USERNAME\fP and \f(CRCB_PASSWORD\fP
variables. See the CERTIFICATE AUTHENTICATION section for more information.
.RE
.sp
CB_CLIENT_KEY_PASSWORD
.RS 4
The password for the key provided to the \f(CRCB_CLIENT_KEY\fP variable, when using
this variable, the key is expected to be in the PKCS#8 format.  See the
CERTIFICATE AUTHENTICATION section for more information.
.RE
.SH "SEE ALSO"
.sp
\fBcbexport\-json\fP(1)
.SH "CBIMPORT"
.sp
Part of the \fBcbimport\fP(1) suite
.SH "AUTHOR"
.sp
Couchbase