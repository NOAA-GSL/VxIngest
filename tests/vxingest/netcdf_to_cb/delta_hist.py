"""
Program Name: produces histogram of deltas from the output of test_metar_obs_netcdf.test_compare_models_to_mysql
or test_metar_obs_netcdf.test_compare_obs_to_mysql
Contact(s): Randy Pierce
Abstract: This program reads the output generated by the test script and parses the delta column to produce
a histogram of each of the observation deltas

History Log:  Initial version

Usage: python delta_hist.py input_file
"""
import argparse
import sys
from pathlib import Path

import plotly.express as px


def parse_args(args):
    """
    Parse command line arguments
    """
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-f",
        "--file",
        type=str,
        help="Please provide required input filename " "-f file",
    )
    args = parser.parse_args(args)
    return args


class HistBuilder:
    delta_file = ""

    def runit(self, args):
        """
        This is the entry point for delta_models_hist.py
        """
        self.delta_file = args["file"].strip()
        try:
            datasets = {}
            unitset = {}
            with Path(self.delta_file).open(encoding="utf-8") as f:
                lines = f.readlines()
            for x in lines:
                if x.startswith("var"):
                    columns = x.split()
                    field = columns[2]
                    delta = columns[5]
                    units = columns[6]
                    if field not in datasets:
                        datasets[field] = []
                    if delta == "None":
                        continue
                    datasets[field].append(float(delta))
                    unitset[field] = units
            keys = datasets.keys()
            for field in keys:
                fig = px.histogram(
                    x=datasets[field],
                    nbins=20,
                    title=self.delta_file + " - " + field.upper(),
                    labels={"x": unitset[field]},
                )
                fig.show()
        except Exception as e:
            print(f"*** Error in  HistBuilder *** - {e}")

    def main(self):
        args = parse_args(sys.argv[1:])
        self.runit(vars(args))
        sys.exit("*** FINISHED ***")


if __name__ == "__main__":
    HistBuilder().main()
